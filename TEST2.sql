-- DBMS

데이터베이스에서 데이터 추출, 조작, 정의, 제어 등을 
할 수 있게 해주는 데이터 베이스 전용 관리 프로그램

--------------------------------------------------------------------------------------

-- SQL

관계형 데이터베이스에서 데이터를 조회하거나 조작하기 위해 사용하는 표준 검색 언어
원하는 데이터를 찾는 방법이나 절차를 기술하는 것이 아닌 조건을 기술하여 작성

--------------------------------------------------------------------------------------

-- DQL(SELECT)

데이터 조회하면 조건에 맞는 행들이 조회된다.
이때, 조회된 행들의 집합을 RESULT SET 이라고 한다.

RESULT SET 은 0개 이상의 행을 포함 할 수 있다.

데이터베이스에 들어 있는 데이터를 조회하거나 검색하기 위한 명령어이다.

--------------------------------------------------------------------------------------

-- DML(INSERT, UPDATE, DELETE)

데이터 조작 언어로 테이블에 값을 삽입하거나, 수정하거나, 삭제하는 구문이다.

데이터베이스의 테이블에 들어 있는 데이터에 변형을 가하는 종류
(데이터 삽입, 수정, 삭제)의 명령어들을 말한다.


1, INSERT

테이블에 새로운 행을 추가하는 구문이다. 

> INSERT문 -- 작성법

1) 모든 컬럼 삽입

INSERT INTO 테이블명 
VALUES(컬럼값, 컬럼값, ...);

2) 특정 컬럼 삽입(지정되지 않은 컬럼은 NULL 또는 DEFAULT 값 삽입)

INSERT INTO 테이블명(컬럼명, 컬럼명, ...)

VALUES (컬럼값, 컬럼값, ...);

3) 서브쿼리를 이용한 삽입

INSERT INTO 테이블명 (서브쿼리);


2, UPDATE

테이블에 기록된 컬럼의 값을 수정하는 구문이다.

> UPDATE문 --작성법

UPDATE 테이블명 SET

컬럼명 = 수정할 컬럼값 또는 (서브쿼리),

컬럼명 = 수정할 컬럼값 또는 (서브쿼리),

...

WHERE 조건문;


3, DELETE

테이블의 행을 삭제하는 구문이다.

> DELETE문 -- 작성법

DELETE FROM 테이블명

WHERE 조건문;

--------------------------------------------------------------------------------------

-- DDL(CREATE, ALTER, DROP)

객체를 만들고, 바꾸고, 삭제하는 데이터 정의 언어

DDL의 주의사항 *****

* DDL은 COMMIT / ROLLBACK 이 되지 않는다.

* DDL과 DML 구문은 섞어서 수행하면 안된다.

1, CREATE 
테이블이나 인덱스, 뷰 등 다양한 데이터베이스 객체를 생성하는 구문이다.
테이블로 생성된 객체는 DROP 구문을 통해 제거 할 수 있다.

2, ALTER 

테이블에서 수정할 수 있는 구문이다.

3, DROP

테이블을 삭제하는 구문이다.

-- [작성법]

DROP TABLE [테이블명] [CASCADE CONSTRAINTS];

CASCADE CONSTRAINTS : 삭제하려는 테이블과 연결된 FK 제약 조건을 모두 삭제한다.

--------------------------------------------------------------------------------------

-- DCL(GRANT, REVOKE)

데이터를 다루기 위한 권한을 다루는 언어이다.

계정에 DB, DB객체에 대한 접근 권한을 부여(GRANT)하고 회수(REVOKE)하는 언어이다.

[권한 부여 작성법]
GRANT 권한, 권한, 권한, ... TO 사용자명;

[권한 회수 작성법]
REVOKE 객체권한 ON 객체명 FROM 사용자명;

--------------------------------------------------------------------------------------

-- TCL(COMMIT, ROLLBACK, SAVEPOINT)

논리적인 작업의 단위를 묶어서 DML에 의해 조작된 결과를
작업단위(트랜잭션)별로 제어하는 명령어를 말한다.

1, COMMIT

메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을 DB에 반영

2, ROLLBACK

메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을 삭제하고
마지막 COMMIT 상태로 돌아간다. (DB에 변경 내용 반영 x)

3, SAVEPOINT

메모리 버퍼(트랜잭션)에 저장 지점을 정의하여 ROLLBACK 수행 시 전체 작업을
삭제하는 것이 아닌 저장 지점까지만 일부 ROLLBACK 하는 기능이다.

> SAVEPOINT문 -- 작성법

SAVEPOINT [포인트명1];
...
SAVEPOINT [포인트명2];
...
SAVEPOINT [포인트명3];

ROLLBACK TO [포인트명2]; -- 포인트 2 지점 까지 데이터 변경사항 삭제

--------------------------------------------------------------------------------------

-- 트랜잭션

데이터베이스의 논리적 연산 단위로
데이터 변경 사항을 묶어 하나의 트랜잭션에 담아 처리한다.
트랜잭션은 DML과 관련되어 있다.

--------------------------------------------------------------------------------------

-- 데이터 딕셔너리

자원을 효율적으로 관리하기 위한 다양한 정보를 저장하는 시스템 테이블

데이터 딕셔너리는 사용자가 테이블을 생성하거나 사용자를 변경하는 등의
작업을 할 때 데이터베이스 서버에 의해 자동으로 갱신되는 테이블

--------------------------------------------------------------------------------------

-- 제약조건

사용자가 원하는 조건의 데이터만 유지하기 위해서 특정 컬럼에 설정하는 제약으로
데이터 무결성 보장을 목적으로 한다.

--------------------------------------------------------------------------------------

> NOT NULL

해당 컬럼에 반드시 값이 기록되어야 하는 경우 사용한다.
삽입/수정 시 NULL 값을 허용하지 않도록 컬럼레벨에서 제한한다.

컬럼 레벨: 테이블 생성 시 컬럼을 정의하는 부분에 작성하는 것이다.

> UNIQUE

컬럼에 입력 값에 대해서 중복을 못하게 제한하는 제약조건이다.
컬럼레벨과 테이블레벨에서 설정 가능하다.
단, UNIQUE 제약 조건이 설정된 컬럼에 NULL값은 중복 삽입 가능하다.

컬럼 레벨 : 

> PK : PRIMARY KEY

테이블에서 한 행의 정보를 찾기 위해 사용할 컬럼을 의미한다.
테이블에 대한 식별자 역할을 한다.

NOT NULL 이면서 UNIQUE 제약 조건을 합친 의미와 같다.
중복되지 않은 값이 필수로 존재해야 한다.

한 테이블당 한 개만 설정할 수 있다.
컬럼레벨과 테이블레벨 둘 다 설정 가능하다.
한 개 컬럼에 설정할 수도 있고, 여러개의 컬럼을 묶어서 설정할 수 있다.

> FK + 삭제 옵션 : FOREIGN KEY

참조된 다른 테이블의 컬럼이 제공하는 값만 사용할 수 있다.
FOREIGN KEY 제약조건에 의해서 테이블간의 관계가 형성된다.
제공되는 값 외에는 NULL을 사용할 수 있다.

참조될 수 있는 컬럼은 PRIMARY KEY 컬럼과 UNIQUE 로 지정된 컬럼만 외래키로 사용할 수 있다.
참조할 테이블의 참조할 컬럼명이 생략이 되면, PRIMARY KEY로 설정이된 컬럼이 자동 참조할
컬럼이 된다.

FOREIGN KEY 삭제옵션
부모 테이블의 데이터 삭제 시 자식 테이블의 데이터를
어떤식으로 처리할 지에 대한 내용을 설정할 수 있다.

-- FOREIGN KEY 삭제옵션 종류

ON DELETE RESTRICTED 로 기본 지정되어 있고
FOREIGN KEY로 지정된 컬럼에서 사용되고 있는 값일 경우
제공하는 컬럼의 값은 삭제하지 못한다.

ON DELETE SET NULL 
부모키 삭제 시 자식키를 NULL로 변경하는 옵션

ON DELETE CASCADE
부모키 삭제 시 자식키도 함께 삭제 된다.
부모키 삭제 시 사용하는 자식 테이블의 컬럼에 해당하는 행이 삭제가 된다.

> CHECK

컬럼에 기록되는 값에 조건 설정을 할 수 있다.
CHECK(컬럼명 비교연산자 비교값)
주의 비교값은 리터럴만 사용할 수 있음, 변하는 값이나 함수 사용 못한다.

CHECK 제약 조건은 범위로도 설정 가능하다.
CHECK 제약 조건은 FOREIGN KEY 제약조건의 하위 호환이다
둘 다 컬럼의 값을 지정된 형태로만 제한을 하지만
CHECK는 작성 후 수정이 번거롭다.
FOREIGN KEY 는 부모 테이블에 행을 추가, 수정, 삭제 하는게 간편하다


--------------------------------------------------------------------------------------

- 관리자 계정, 사용자 계정

관리자 계정 :

데이터베이스의 생성과 관리를 담당하는 계정.
모든 권한과 책임을 가지는 계정.
sys : 최고 관리자
system : sys에서 권한 몇 개 제외된 관리자

사용자 계정:

데이터베이스에 대하여 질의, 갱신, 보고서 작성 등의
작업을 수행할 수 있는 계정으로 업무에 필요한
최소한의 권한만 가지는 것을 원칙으로 한다.

--------------------------------------------------------------------------------------

- 시스템 권한, 객체 권한, ROLE(CONNECT, RESORUCE)

시스템 권한 종류 : DB접속, 객체 생성 권한

CREATE SESSION : 데이터베이스 접속 권한
CREATE TABLE : 테이블 생성 권한
CREATE VIEW : 뷰 생성 권한
CREATE SEQUENCE : 시퀀스 생성 권한
CREATE PROCEDURE : 함수(프로시져) 생성 권한
CREATE USER : 사용자 계정 생성 권한
DROP USER : 사용자 계정 삭제 권한
DROP ANY TABLE : 임의 테이블 삭제 권한

객체 권한 : 특정 객체를 조작할 수 있는 권한

SELECT : TABLE, VIEW, SEQUENCE
INSERT : TABLE, VIEW
UPDATE : TABLE, VIEW
DELETE : TABLE, VIEW
ALTER : TABLE, SEQUENCE
REFERENCES : TABLE
INDEX : TABLE
EXECUTE : PROCEDURE

ROLE : 권한 묶음이다.
묶어둔 권한(ROLE) 특정 계정에 부여
해당 계정은 지정된 권한을 이용해서 특정 역할을 갖게 된다.

CONNECT : DB 접속 관련 권한을 묶어둔 ROLE
RESOURCE : DB 사용을 위한 기본 객체 생성 권한을 묶어둔 ROLE 

--------------------------------------------------------------------------------------

- SELECT, INSERT, UPDATE, DELETE 작성법

--> SELECT문

5: SELECT절

1: FROM절 + JOIN

2: WHERE절

3: GROUP BY잘

4: HAVING절

6: ORDER BY절

+ JOIN 방법(INNER, OUTER(LEFT, RIGHT))

INNER JOIN 내부 조인
연결되는 컬럼의 값이 일치하는 행들만 조인된다.

OUTER JOIN 외부 조인
두 테이블의 지정하는 컬럼값이 일치하지 않는 행도 조인에 포함을 시킨다.

LEFT JOIN
합치기에 사용한 두 테이블 중 왼편에 기술된 테이블의 컬럼 수를 기준으로 조인된다.

RIGHT JOIN
합치기에 사용한 두 테이블 중 오른편에 기술된 테이블의 컬럼 수를 기준으로 조인된다.

+ 서브쿼리(단일행, 다중행, 다중열)

단일행 서브쿼리
서브쿼리의 조회 결과 값의 개수가 1개일 때

다중행 서브쿼리
서브쿼리의 조회 결과 값의 개수가 여러개 일 때

다중열 서브쿼리
서브쿼리의 SELECT 절에 나열된 항목 수가 여러개 일 때

--> INSERT문

1) 모든 컬럼 삽입

INSERT INTO 테이블명 VALUES(컬럼값, 컬럼값, ...);

2) 특정 컬럼 삽입(지정되지 않은 컬럼은 NULL 또는 DEFAULT 값 삽입)

INSERT INTO 테이블명(컬럼명, 컬럼명, ...)

VALUES (컬럼값, 컬럼값, ...);

3) 서브쿼리를 이용한 삽입

INSERT INTO 테이블명 (서브쿼리);

--> UPDATE문

UPDATE 테이블명 SET

컬럼명 = 수정할 컬럼값 또는 (서브쿼리),

컬럼명 = 수정할 컬럼값 또는 (서브쿼리),

...

WHERE 조건문;

--> DELETE문

DELETE FROM 테이블명

WHERE 조건문;

--------------------------------------------------------------------------------------

-- CREATE TABLE 작성법

CREATE TABLE 테이블명(
	컬럼명1 자료형(크기) 제약조건
	컬럼명2 자료형(크기) 제약조건
);

--------------------------------------------------------------------------------------

--> 데이터 타입 :

NUMBER, CHAR(1~2000), VARCHAR2(1~4000), DATE

NUMBER : 숫자형(정수, 실수)

CHAR(1~2000) : 고정길이 문자형

VARCHAR2(1~4000) : 가변길이 문자형

CHAR(10) 자료형은 10BYTE 공간을 다 사용 안해도 10BYTE의 저장공간을 모두 사용한다.

VARCHAR2(10) 자료형은 10BYTE 공간 중 사용 안한 공간의 BYTE를 반환해준다.

DATE : 날짜 타입의 자료형이다.

--------------------------------------------------------------------------------------

> 기본값 :

DEFAULT

테이블 생성 시 해당 컬럼에 지정된 DEFAULT 값으로 삽입된다.

--------------------------------------------------------------------------------------

> 제약조건 작성법

[NOT NULL 작성법]
CREATE TABLE 테이블명 (
	컬럼명 자료형(크기) NOT NULL
);

-> 컬럼 레벨만 작성 가능 : NOT NULL

--------------------------------------------------------------------------------------

-> 컬럼, 테이블 레벨 모두 작성 가능 : PK, FK, UNIQUE, CHECK

[UNIQUE 작성법]

CREATE TABLE 테이블명 (
	컬럼명 자료형(크기) [CONSTRAINT 제약조건명(생략가능)] UNIQUE -- 컬럼레벨 작성 시 작성법
-- 테이블 레벨
	[CONSTRAINT 제약조건명(생략가능)] UNIQUE(컬럼명) -- 테이블 레벨 작성 시 작성법 
);

[UNIQUE 복합키 작성법]

UNIQUE 복합키 : 두 개 이상의 컬럼을 묶어서 하나의 UNIQUE 제약조건을 설정한다.

CREATE TABLE 테이블명 (
	컬럼명 자료형(크기) 제약조건
	-- 테이블 레벨
	[CONSTRAINT 제약조건명(생략가능)] UNIQUE(컬럼명, 컬럼명) -- 테이블 레벨 작성 시 작성법
	-- UNIQUE 복합키는 테이블 레벨에서만 작성가능하고,
	-- 복합키로 지정된 컬럼의 값이 같을 때 위배된다.
);

[PRIMARY KEY 작성법]

CREATE TABLE 테이블명 (
	컬럼명 자료형(크기) [CONSTRAINT 제약조건명(생략가능)] PRIMARY KEY -- 컬럼레벨 작성 시 작성법
-- 테이블 레벨
	[CONSTRAINT 제약조건명(생략가능)] PRIMARY KEY(컬럼명) -- 테이블 레벨 작성 시 작성법 
);

CREATE TABLE 테이블명 (
	컬럼명 자료형(크기) 제약조건
	-- 테이블 레벨
	[CONSTRAINT 제약조건명(생략가능)] PRIMARY KEY(컬럼명, 컬럼명) -- 테이블 레벨 작성 시 작성법
	-- PRIMARY KEY 복합키는 테이블 레벨에서만 작성가능하고,
	-- 복합키로 지정된 컬럼의 값이 같을 때 위배된다.
);

[FOREIGN KEY 작성법]

CREATE TABLE 테이블명 (
-- 컬럼레벨 작성 시 작성법
	컬럼명 자료형(크기) [CONSTRAINT 제약조건명(생략가능)] REFERENCES 참조할테이블명(참조할컬럼명) [삭제옵션]
-- 테이블 레벨
-- 테이블 레벨 작성 시 작성법 : 테이블 레벨에서만 FOREIGN KEY라는 단어를 사용할 수 있다.
	[CONSTRAINT 제약조건명(생략가능)] FOREIGN KEY(적용할컬럼명) REFERENCES 참조할테이블명(참조할컬럼명) [삭제옵션]
);

(FK 제약조건은 레벨에 따라 작성법에 차이가 있음)

[CHECK 작성법]
CREATE TABLE 테이블명 (
-- 컬럼레벨 작성 시 작성법
	컬럼명 자료형(크기) [CONSTRAINT 제약조건명(생략가능)] CHECK (컬럼명 비교연산자 비교값)
-- 테이블 레벨
-- 테이블 레벨 작성 시 작성법
	[CONSTRAINT 제약조건명(생략가능)] CHECK (컬럼명 비교연산자 비교값)
);


--------------------------------------------------------------------------------------

- VIEW, SEQUENCE 생성을 위한 기본 작성법 (옵션 X)

[VIEW 생성을 위한 기본 작성법]
CREATE VIEW 뷰이름 
AS (서브 쿼리);
SELECT문의 실행 결과(RESULTSET)를 저장하는 객체
논리적 가상 테이블이다.

[SEQUENCE 생성을 위한 기본 작성법]
CREATE SEQUENCE 시퀀스이름;
순차적 번호 자동 발생기 역학의 객체
지정된 범위 내에서 일정한 간격으로 증가하는
숫자가 순차적으로 출력됨

--------------------------------------------------------------------------------------